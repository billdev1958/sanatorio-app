name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4

      - name: Login en Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Construir y subir im√°genes a Docker Hub
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
        run: |
          # Backend
          docker build -t $DOCKER_USER/sanatorio-back:${{ github.run_number }} -t $DOCKER_USER/sanatorio-back:latest ./sanatorio-back
          docker push $DOCKER_USER/sanatorio-back:${{ github.run_number }}
          docker push $DOCKER_USER/sanatorio-back:latest

          # Frontend
          docker build -t $DOCKER_USER/csm-pacientes:${{ github.run_number }} -t $DOCKER_USER/csm-pacientes:latest ./csm-pacientes
          docker push $DOCKER_USER/csm-pacientes:${{ github.run_number }}
          docker push $DOCKER_USER/csm-pacientes:latest
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Desplegar en el servidor v√≠a SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e  # Detener el script en caso de error
            
            # Moverse al directorio del proyecto en el servidor
            cd /home/bill/sanatorio-app
  
            # Mostrar archivos en el servidor antes de ejecutar cualquier comando
            echo "üìÇ Archivos en el servidor:"
            ls -lah /home/bill/sanatorio-app/
  
            # Verificar si .env.dev sigue existiendo
            if [ -f .env.dev ]; then
              echo "‚ö†Ô∏è Advertencia: .env.dev a√∫n existe. Elimin√°ndolo..."
              rm .env.dev
            fi
  
            # Mostrar contenido del Makefile para ver qu√© variables usa
            echo "üìú Contenido del Makefile:"
            cat Makefile
  
            # Mostrar contenido del docker-compose-production.yml
            echo "üìú Contenido del docker-compose-production.yml:"
            cat docker-compose-production.yml
  
            # Actualizar las etiquetas en docker-compose-production.yml para usar la nueva versi√≥n
            sed -i 's|billdev1958/sanatorio-back:.*|billdev1958/sanatorio-back:${{ github.run_number }}|' docker-compose-production.yml
            sed -i 's|billdev1958/csm-pacientes:.*|billdev1958/csm-pacientes:${{ github.run_number }}|' docker-compose-production.yml
  
            # Descargar las nuevas im√°genes
            docker compose pull
  
            # Mostrar qu√© entorno est√° cargando `docker-compose`
            echo "üõ†Ô∏è Variables de entorno en uso:"
            docker compose config | grep -i env
  
            # Usar make para iniciar el entorno de producci√≥n
            make prod
  
            # Limpiar im√°genes antiguas y archivos innecesarios
            docker system prune -f
  